{"version":3,"sources":["components/WordCard.js","components/WordCardList.js","components/Suggestion.js","App.js","serviceWorker.js","index.js"],"names":["WordCard","props","className","word","score","WordCardList","words","map","w","key","Suggestion","value","getWords","input","a","fetch","response","json","filter","numSyllables","getSuggestions","App","state","userInput","suggestions","handleSubmit","e","preventDefault","setState","handleChange","target","id","onSubmit","this","type","onChange","list","required","s","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAYeA,MATf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,sBACb,uBAAGA,UAAU,iBAAiBD,EAAME,MACpC,uBAAGD,UAAU,kBAAkBD,EAAMG,MAAQ,IAA7C,YCMSC,MAVf,SAAsBJ,GACpB,OACE,yBAAKC,UAAU,0BACZD,EAAMK,MAAMC,KAAI,SAAAC,GAAC,OAChB,kBAAC,EAAD,CAAUC,IAAKD,EAAEL,KAAMA,KAAMK,EAAEL,KAAMC,MAAOI,EAAEJ,aCDvCM,MAJf,SAAoBT,GAClB,OAAO,4BAAQU,MAAOV,EAAME,Q,SCEfS,E,8EAAf,WAAwBC,GAAxB,iBAAAC,EAAA,sEACyBC,MAAM,qCAAD,OAAsCF,IADpE,cACQG,EADR,gBAEqBA,EAASC,OAF9B,cAEQA,EAFR,yBAGSA,EAAKC,QACV,SAAAV,GAAC,OACCA,EAAEW,eAAiBF,EAAK,GAAGE,cAC3BX,EAAEL,OAASU,GACXL,EAAEJ,OAAS,OAPjB,4C,+BAWegB,E,8EAAf,WAA8BP,GAA9B,iBAAAC,EAAA,sEACyBC,MAAM,kCAAD,OAAmCF,IADjE,cACQG,EADR,gBAEqBA,EAASC,OAF9B,cAEQA,EAFR,yBAGSA,GAHT,4C,0BAsDeI,E,2MA/CbC,MAAQ,CAAEhB,MAAO,GAAIiB,UAAW,aAAcC,YAAa,I,EAqC3DC,a,uCAAe,WAAMC,GAAN,SAAAZ,EAAA,6DACbY,EAAEC,iBADW,gBAEgBf,EAAS,EAAKU,MAAMC,WAFpC,yBAEGjB,MAFH,WAERsB,SAFQ,2D,wDAIfC,a,uCAAe,WAAMH,GAAN,SAAAZ,EAAA,6DACb,EAAKc,SAAS,CAAEL,UAAWG,EAAEI,OAAOnB,QADvB,gBAEsBS,EAAe,EAAKE,MAAMC,WAFhD,yBAEGC,YAFH,WAERI,SAFQ,2D,8HAtCb,OACE,yBAAK1B,UAAU,OAEb,yBAAKA,UAAU,wBACb,wBAAI6B,GAAG,cAAP,0BACA,0BAAMC,SAAUC,KAAKR,aAAcM,GAAG,cACpC,+BACE,2BACEG,KAAK,OACLH,GAAG,aACHI,SAAUF,KAAKJ,aACfO,KAAK,gBAEP,8BAAUL,GAAG,cAAcM,UAAQ,GAChCJ,KAAKX,MAAME,YAAYjB,KAAI,SAAA+B,GAAC,OAC3B,kBAAC,EAAD,CAAY7B,IAAK6B,EAAEnC,KAAMA,KAAMmC,EAAEnC,YAIvC,4BAAQ+B,KAAK,SAAShC,UAAU,eAAhC,UAKJ,kBAAC,EAAD,CAAcI,MAAO2B,KAAKX,MAAMhB,W,gKAKpC2B,K,SAA6BrB,EAASqB,KAAKX,MAAMC,W,yBAAjCjB,M,WAAXsB,S,iKAGLW,QAAQC,IAAIP,KAAKX,W,GApCHmB,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c243c2b6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/WordCard.css\";\n\nfunction WordCard(props) {\n  return (\n    <div className=\"WordCard-container\">\n      <p className=\"WordCard-word\">{props.word}</p>\n      <p className=\"WordCard-score\">{props.score + \"%\"} match</p>\n    </div>\n  );\n}\n\nexport default WordCard;\n","import React from \"react\";\nimport WordCard from \"./WordCard\";\n\nfunction WordCardList(props) {\n  return (\n    <div className=\"WordCardList-container\">\n      {props.words.map(w => (\n        <WordCard key={w.word} word={w.word} score={w.score} />\n      ))}\n    </div>\n  );\n}\n\nexport default WordCardList;\n","import React from \"react\";\n\nfunction Suggestion(props) {\n  return <option value={props.word}></option>;\n}\n\nexport default Suggestion;\n","import React from \"react\";\nimport \"./css/App.css\";\nimport WordCardList from \"./components/WordCardList\";\nimport Suggestion from \"./components/Suggestion\";\n\nasync function getWords(input) {\n  const response = await fetch(`https://api.datamuse.com/words?sl=${input}`);\n  const json = await response.json();\n  return json.filter(\n    w =>\n      w.numSyllables === json[0].numSyllables &&\n      w.word !== input &&\n      w.score >= 20\n  );\n}\n\nasync function getSuggestions(input) {\n  const response = await fetch(`https://api.datamuse.com/sug?s=${input}`);\n  const json = await response.json();\n  return json;\n}\n\nclass App extends React.Component {\n  state = { words: [], userInput: \"ever dance\", suggestions: [] };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <h1 className=\"App-header\">Malapropism Generator</h1> */}\n        <div className=\"App-search-container\">\n          <h2 id=\"words-that\">Words that sound like </h2>\n          <form onSubmit={this.handleSubmit} id=\"form-input\">\n            <label>\n              <input\n                type=\"text\"\n                id=\"user-input\"\n                onChange={this.handleChange}\n                list=\"suggestions\"\n              />\n              <datalist id=\"suggestions\" required>\n                {this.state.suggestions.map(s => (\n                  <Suggestion key={s.word} word={s.word} />\n                ))}\n              </datalist>\n            </label>\n            <button type=\"submit\" className=\"find-button\">\n              Find\n            </button>\n          </form>\n        </div>\n        <WordCardList words={this.state.words} />\n      </div>\n    );\n  }\n  async componentDidMount() {\n    this.setState({ words: await getWords(this.state.userInput) });\n  }\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n  handleSubmit = async e => {\n    e.preventDefault();\n    this.setState({ words: await getWords(this.state.userInput) });\n  };\n  handleChange = async e => {\n    this.setState({ userInput: e.target.value });\n    this.setState({ suggestions: await getSuggestions(this.state.userInput) });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}